// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Categorytype")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.CategoryFunction", b =>
                {
                    b.Property<Guid>("CategoryFunctionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_IdFunction")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryFunctionid");

                    b.HasIndex("Fk_CategoryId");

                    b.HasIndex("Fk_IdFunction");

                    b.ToTable("CategoryFunction");
                });

            modelBuilder.Entity("Domain.Models.Function", b =>
                {
                    b.Property<Guid>("IdFunction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFunction");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("Domain.Models.FunctionofUser", b =>
                {
                    b.Property<Guid>("IdFunctionofUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_Function")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdFunctionofUser");

                    b.HasIndex("Fk_Function");

                    b.ToTable("FunctionofUser");
                });

            modelBuilder.Entity("Domain.Models.Organisme", b =>
                {
                    b.Property<Guid>("OrganismeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganismeId");

                    b.ToTable("Organisme");
                });

            modelBuilder.Entity("Domain.Models.PieceJoint", b =>
                {
                    b.Property<Guid>("PieceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("fk_Request")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PieceId");

                    b.HasIndex("fk_Request");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Domain.Models.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Fk_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("fk_Filliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_Organisme")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("fk_RequestType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("fk_Organisme");

                    b.HasIndex("fk_RequestType");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.Models.typeRequest", b =>
                {
                    b.Property<Guid>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("typeRequests");
                });

            modelBuilder.Entity("Domain.Models.typerequestCatg", b =>
                {
                    b.Property<Guid>("typerequestCatgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_typeRequest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Fk_CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("typerequestCatgID");

                    b.HasIndex("FK_typeRequest");

                    b.HasIndex("Fk_CategoryId");

                    b.ToTable("typerequestCatg");
                });

            modelBuilder.Entity("Domain.Models.CategoryFunction", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("CategoryFunction")
                        .HasForeignKey("Fk_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Function", "Function")
                        .WithMany("CategoryFunction")
                        .HasForeignKey("Fk_IdFunction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.FunctionofUser", b =>
                {
                    b.HasOne("Domain.Models.Function", "Function")
                        .WithMany("FunctionofUsers")
                        .HasForeignKey("Fk_Function")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.PieceJoint", b =>
                {
                    b.HasOne("Domain.Models.Request", "Requests")
                        .WithMany("Pieces")
                        .HasForeignKey("fk_Request")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Request", b =>
                {
                    b.HasOne("Domain.Models.Organisme", "Organisme")
                        .WithMany("Requests")
                        .HasForeignKey("fk_Organisme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.typeRequest", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("fk_RequestType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.typerequestCatg", b =>
                {
                    b.HasOne("Domain.Models.typeRequest", "typeRequest")
                        .WithMany("typerequestCatg")
                        .HasForeignKey("FK_typeRequest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("typerequestCatgories")
                        .HasForeignKey("Fk_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
